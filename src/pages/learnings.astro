---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import { SITE_TITLE } from '../consts';
import { getCollection } from 'astro:content';

const learnings = await getCollection('learnings');
const sortedLearnings = learnings.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

const categories = [...new Set(learnings.map(learning => learning.data.category).filter(Boolean))];
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={`Learnings - ${SITE_TITLE}`} description="Recent learnings and discoveries by Birol Senturk" />
	</head>
	<body>
		<Header />
		<main>
			<section>
				<h1>Recent Learnings</h1>
				<p>Quick posts about things I've recently discovered, learned, or found interesting.</p>
			</section>

			{categories.length > 0 && (
				<section class="categories">
					<h2>Categories</h2>
					<div class="category-tags">
						{categories.map((category) => (
							<span class="category-tag">{category}</span>
						))}
					</div>
				</section>
			)}

			<section class="learnings-list">
				{sortedLearnings.length === 0 ? (
					<p class="no-items">No learnings posted yet. Check back soon!</p>
				) : (
					<div class="learnings-grid">
						{sortedLearnings.map((learning) => (
							<article class="learning-card">
								<div class="learning-header">
									<h3>
										<a href={`/learnings/${learning.id}`}>{learning.data.title}</a>
									</h3>
									<div class="meta">
										<FormattedDate date={learning.data.date} />
										{learning.data.difficulty && (
											<span class={`difficulty ${learning.data.difficulty}`}>
												{learning.data.difficulty}
											</span>
										)}
									</div>
								</div>
								
								<p class="summary">{learning.data.summary}</p>
								
								<div class="learning-footer">
									{learning.data.category && (
										<span class="category">{learning.data.category}</span>
									)}
									{learning.data.source && (
										<span class="source">Source: {learning.data.source}</span>
									)}
								</div>
								
								{learning.data.tags && (
									<div class="tags">
										{learning.data.tags.map((tag) => (
											<span class="tag">{tag}</span>
										))}
									</div>
								)}
							</article>
						))}
					</div>
				)}
			</section>
		</main>
		<Footer />
	</body>
</html>

<style>
	main {
		margin: auto;
		padding: 1rem;
		width: 1000px;
		max-width: calc(100% - 2rem);
		color: rgb(var(--gray-dark));
		line-height: 1.6;
	}

	.categories {
		margin: 2rem 0;
		padding: 1rem;
		background: rgb(var(--gray-light));
		border-radius: 8px;
	}

	.categories h2 {
		margin: 0 0 1rem 0;
		font-size: 1.2rem;
		color: rgb(var(--black));
	}

	.category-tags {
		display: flex;
		flex-wrap: wrap;
		gap: 0.5rem;
	}

	.category-tag {
		background: white;
		color: rgb(var(--gray-dark));
		padding: 0.3rem 0.8rem;
		border-radius: 20px;
		font-size: 0.8rem;
		border: 1px solid rgb(var(--gray));
	}

	.learnings-list {
		margin-top: 2rem;
	}

	.no-items {
		text-align: center;
		color: rgb(var(--gray));
		font-style: italic;
		margin: 2rem 0;
	}

	.learnings-grid {
		display: grid;
		gap: 1.5rem;
	}

	.learning-card {
		background: white;
		border: 1px solid rgb(var(--gray-light));
		border-radius: 8px;
		padding: 1.5rem;
		transition: box-shadow 0.2s ease, transform 0.2s ease;
	}

	.learning-card:hover {
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
		transform: translateY(-2px);
	}

	.learning-header {
		display: flex;
		justify-content: space-between;
		align-items: flex-start;
		margin-bottom: 1rem;
		gap: 1rem;
	}

	.learning-header h3 {
		margin: 0;
		font-size: 1.3rem;
		flex-grow: 1;
	}

	.learning-header h3 a {
		text-decoration: none;
		color: rgb(var(--black));
	}

	.learning-header h3 a:hover {
		color: rgb(var(--accent));
	}

	.meta {
		display: flex;
		flex-direction: column;
		align-items: flex-end;
		gap: 0.3rem;
		white-space: nowrap;
	}

	.meta time {
		font-size: 0.8rem;
		color: rgb(var(--gray));
	}

	.difficulty {
		padding: 0.2rem 0.5rem;
		border-radius: 12px;
		font-size: 0.7rem;
		text-transform: uppercase;
		letter-spacing: 0.5px;
		font-weight: 600;
	}

	.difficulty.beginner {
		background: #e7f5e7;
		color: #2d5a2d;
	}

	.difficulty.intermediate {
		background: #fff3cd;
		color: #856404;
	}

	.difficulty.advanced {
		background: #f8d7da;
		color: #721c24;
	}

	.summary {
		margin: 0 0 1rem 0;
		color: rgb(var(--gray-dark));
		font-size: 1rem;
	}

	.learning-footer {
		margin-bottom: 1rem;
		display: flex;
		gap: 1rem;
		flex-wrap: wrap;
		align-items: center;
	}

	.category {
		background: rgb(var(--accent-light));
		color: rgb(var(--accent-dark));
		padding: 0.3rem 0.7rem;
		border-radius: 4px;
		font-size: 0.8rem;
		font-weight: 500;
	}

	.source {
		font-size: 0.8rem;
		color: rgb(var(--gray));
		font-style: italic;
	}

	.tags {
		display: flex;
		flex-wrap: wrap;
		gap: 0.3rem;
	}

	.tag {
		background: rgb(var(--gray-light));
		color: rgb(var(--gray-dark));
		padding: 0.2rem 0.5rem;
		border-radius: 12px;
		font-size: 0.7rem;
		text-transform: lowercase;
	}

	@media (max-width: 768px) {
		.learning-header {
			flex-direction: column;
			align-items: flex-start;
		}

		.meta {
			flex-direction: row;
			align-items: center;
		}

		.learning-footer {
			flex-direction: column;
			align-items: flex-start;
			gap: 0.5rem;
		}
	}
</style>